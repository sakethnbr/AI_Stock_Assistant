import json
import openai
import matplotlib.pyplot as plt
import streamlit as st
import pandas as pd
import yfinance as yf 


#Here is where the API key is being read in 
openai.api_key = open('Key', 'r').read()


def get_stock_price(ticker):
#Used for getting stock price 
#This function takes in the ticker parameter that the OpenAI API passes 
#in and then passess it through the yfinance information and returns the stock data
#From the past year in string form
    return str(yf.Ticker(ticker).history(period = '1y').iloc[-1].Close)

def calculate_SMA(ticker, window):
#Used to calculate SMA (Simple Moving Average)
#Done by taking the ticket history data from yf and
#Using it to find the mean of the live data 
    data = yf.Ticker(ticker).history(period = '1y').Close
    return str(data.rolling(window = window).mean().iloc[-1])

def calculate_EMA(ticker, window):
#Used to calculate EMA (Exponential Moving Average)
#Done by taking the ticket history data from yf and
#Using it to find the mean of the live data 
    data = yf.Ticker(ticker).history(period = '1y').Close
    return str(data.ewm(span = window, adjust=False).mean().iloc[-1])

###THE FOLLOWING FUNCTIONS ARE OPTIONAL, DO NOT WASTE TIME ON THEM IF YOU DO NOT
###NEED THEM
def calculate_RSI(ticker):
#Used to calculate RSI (Relative Strength Index)
#FINISH DOCUMENTATION FOR THIS
    data = yf.Ticker(ticker).history(period = '1y').Close
    delta = data.diff()
    up = delta.clip(lower = 0)
    down = -1 * delta.clip(upper =0)
    ema_up = up.ewm(com = 14 -1, adjust = False).mean()
    ema_down = down.ewm(com = 14 - 1, adjust =False).mean()
    rs= ema_up / ema_down
    return str(100 - (100 / (1 + rs)).iloc[-1])

def calculate_MACD(ticker):
#Used to calculate MACD (Moving average convergence/divergence)
#to indicate to invesors when to buy or sell stocks
    data = yf.Ticker(ticker).history(period = '1y').Close
    short_EMA = data.ewm(span = 12, adjust =False).mean()
    long_EMA = data.ewm(span = 26, adjust =False).mean()
    MACD = short_EMA - long_EMA
    signal = MACD.ewm(span = 9, adjust = False).mean()
    MACD_histogram = MACD - signal
    return f'{MACD[-1]}, {signal[-1]}, {MACD_histogram[-1]}'

###END OF OPTIONAL FUNCTIONS

#FIX THIS FUNCTION

'''
def plot_stock_price(ticker):
#Function used to plot the stock price
#Sends ticker information into a plot using matplotlib
    data = yf.Ticker(ticker).history(period = '1y').Close
    plt.figure(figsize =(10, 5))
    plt.plot(*args:data.index, data.Close)
    plt.title('{ticker} Stock Price Over Last Year')
    plt.xlabel('Date')
    plt.ylabel('Stock Price ($)')
    plt.grid(True)
    plt.savefig('stock.png')
    plt.close()

'''










